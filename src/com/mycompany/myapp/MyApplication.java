package com.mycompany.myapp;

import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.l10n.SimpleDateFormat;
import com.codename1.ui.Button;
import com.codename1.ui.Calendar;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Container;
import com.codename1.ui.List;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.spinner.Picker;
import com.codename1.util.Callback;
import com.mycompany.myapp.Components.Colors;
import com.mycompany.myapp.Components.CustomDatePicker;
import com.mycompany.myapp.Components.CustomFont;
import com.mycompany.myapp.Components.LabelCreator;
import com.mycompany.myapp.Components.PatientList;
import com.mycompany.myapp.Controller.PreviousVisitAddController;
import com.mycompany.myapp.Reposatory.PatientLoaderDatabaseHelper;
import com.mycompany.myapp.Reposatory.VisitDayHelper;
import java.util.Date;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication extends CustomDatePicker implements CustomFont, Colors {

    private Form current, form;
    Container firstPart, secondPart, thirdPart, secondLeft, secondMid, secondRight, secondMidLeft, secondMidRight, thirdPartLeft, thirdPartRight, thirdPartLeftLeft, thirdPartLeftCenter, thirdPartLeftRight, thirdPartRightLeft, thirdPartRightCenter, thirdPartRightRight;
    private Resources theme;

    Label today, leftDate, rightDate;

    ComboBox<String> wards;

    Container dateShownContainer;

    DefaultListModel leftDefaultListModel, rightDefaultListModel;

    List leftList, rightList;

    Picker datePicker;
    
    private Button prevButton, nextButton;

    Button previousVisitAdd, previousVisitRemove, previousVisitPrint;
    Button presentVisitAdd, presentVisitRemove, presentVisitPrint;

    VisitDayHelper visitDayData = new VisitDayHelper();

    private Calendar calendar;
    private SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");

    PatientList visitList = new PatientList();
    PatientList visitList1 = new PatientList();

    Date currentDate;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }

        form = new Form("Worksheet", new BorderLayout());

        wards = new ComboBox<>("Children Ward", "Female Ward", "Male Ward", "Maternity Ward", "OPD");

        firstPart = new Container(new BorderLayout());

        firstPart.setUIID("FirstPart");
        firstPart.getStyle().setBgColor(0xffcccc);
        firstPart.getStyle().setBgTransparency(255);
        firstPart.setPreferredH(35);

//        Date prevDate1 = new Date(currentDate.getTime() - (1 * 24 * 60 * 60 * 1000)); // Subtract 1 day
        //      leftDate.setText(sdf.format(prevDate1));
        //    rightDate.setText(sdf.format(currentDate));
        wards.addActionListener(e -> {

            Date prevDate = new Date(currentDate.getTime() - (1 * 24 * 60 * 60 * 1000)); // Subtract 1 day
            leftDate.setText(sdf.format(prevDate));

            rightDate.setText(sdf.format(currentDate));

            form.revalidate();

            visitList.clear();
            visitList1.clear();

            leftDefaultListModel.removeAll();
            rightDefaultListModel.removeAll();

            leftDefaultListModel = new DefaultListModel();
            rightDefaultListModel = new DefaultListModel();

            leftList.setModel(leftDefaultListModel);
            rightList.setModel(rightDefaultListModel);

            form.revalidate();

            visitDayData.readSearchingVisitDay(leftDate.getText(), wards.getSelectedItem(), visitList, leftList);

            visitDayData.readSearchingVisitDay(rightDate.getText(), wards.getSelectedItem(), visitList1, rightList);

            if (currentDate.getTime() == new Date().getTime()) {

                nextButton.setEnabled(false);

            }

            if (currentDate.getTime() >= new Date().getTime()) {
                nextButton.setEnabled(false);
            } else {
                nextButton.setEnabled(true);
            }

            Date todayTime = new Date();

            if (sdf.format(currentDate).equals(sdf.format(todayTime))) {
                today.setVisible(true);
            } else {
                today.setVisible(false);
            }

            form.revalidate();

        });

        secondPart = new Container(new BorderLayout());

        secondPart.setUIID("SecondPart");
        secondPart.getStyle().setBgColor(0xccffcc);
        secondPart.getStyle().setBgTransparency(255);
        secondPart.setPreferredH(30);

        secondLeft = new Container(new BorderLayout());

        secondLeft.setUIID("SecondTop");
        secondLeft.getStyle().setBgColor(0xffcc99);
        secondLeft.getStyle().setBgTransparency(255);
        secondLeft.setPreferredW(30);

        secondRight = new Container(new BorderLayout());

        secondRight.setUIID("SecondRight");
        secondRight.getStyle().setBgColor(0xffcc99);
        secondRight.getStyle().setBgTransparency(255);
        secondRight.setPreferredW(30);

        prevButton = new Button("<");
        nextButton = new Button(">");

        secondLeft.add(BorderLayout.CENTER, prevButton);
        secondRight.add(BorderLayout.CENTER, nextButton);

        currentDate = new Date();

        leftDate = new LabelCreator("9/5/2024").getLabel();
        rightDate = new LabelCreator("10/5/2024").getLabel();

        Date todayDate = new Date();

        if (currentDate.getTime() == todayDate.getTime()) {

            nextButton.setEnabled(false);

        }

        prevButton.addActionListener(e -> moveDate(-2));
        nextButton.addActionListener(e -> moveDate(2));

        secondMid = new Container(new GridLayout(1, 2));

        secondMid.setUIID("SecondMid");
        secondMid.getStyle().setBgColor(0xff9999);
        secondMid.getStyle().setBgTransparency(255);
        secondMid.setPreferredW(40);

        //secondMid.add(leftDate)
        //      .add(rightDate);
        secondMidRight = new Container(new BoxLayout(BoxLayout.Y_AXIS));

        secondMidRight.setUIID("SecondMid");
        secondMidRight.getStyle().setBgColor(0xffcccc);
        secondMidRight.getStyle().setBgTransparency(255);
        //secondMid.setPreferredW(40);

        secondMidLeft = new Container(new BoxLayout(BoxLayout.Y_AXIS));

        secondMidLeft.setUIID("SecondMid");
        secondMidLeft.getStyle().setBgColor(0xcc99ff);
        secondMidLeft.getStyle().setBgTransparency(255);

        firstPartSetUp(firstPart);

        setMidPart();

        updateDateLabels();

        secondMid.add(secondMidLeft).add(secondMidRight);

        secondPart.add(BorderLayout.WEST, secondLeft);
        secondPart.add(BorderLayout.CENTER, secondMid);
        secondPart.add(BorderLayout.EAST, secondRight);

        thirdPart = new Container(new GridLayout(1, 2));

        thirdPart.setUIID("ThirdPart");
        thirdPart.getStyle().setBgColor(0xcc99ff);
        thirdPart.getStyle().setBgTransparency(255);
        thirdPart.setPreferredH(35);

        thirdPartLeft = new Container(new GridLayout(1, 3));
        thirdPartLeft.setUIID("ThirdPart Left");
        thirdPartLeft.getStyle().setBgColor(0x000000);
        thirdPartLeft.getStyle().setBgTransparency(255);

        thirdPartRight = new Container(new GridLayout(1, 3));
        thirdPartRight.setUIID("ThirdPart Right");
        thirdPartRight.getStyle().setBgColor(0xcc99ff);
        thirdPartRight.getStyle().setBgTransparency(255);

        thirdPart.add(thirdPartLeft)
                .add(thirdPartRight);

        setThirdPart();

        form.add(BorderLayout.NORTH, firstPart);

        form.add(BorderLayout.CENTER, secondPart);
        form.add(BorderLayout.SOUTH, thirdPart);

        form.setScrollable(true);

        form.show();

    }

    public void firstPartSetUp(Container container) {

        Container selectWardContainer = new Container(new BoxLayout(BoxLayout.X_AXIS));

        Label selectWard = new LabelCreator("Wards").getLabel();
        selectWard.setPreferredW(45);

        //wards = new ComboBox<>("Children Ward", "Female Ward", "Male Ward", "Maternity Ward", "OPD");
        selectWardContainer.add(selectWard)
                .add(wards);

        container.add(BorderLayout.WEST, selectWardContainer);

        Container dateSelectorContainer = new Container(new BoxLayout(BoxLayout.X_AXIS));

        Label goToDate = new LabelCreator("Go To Date").getLabel();

        dateSelectorContainer.add(goToDate);

        datePicker = getDatePicker();
        
        dateSelectorContainer.add(datePicker);

        datePicker.addActionListener(e -> {

            System.out.println("I am in the date picker.");
            
            currentDate = datePicker.getDate();
            
            Date prevDate = new Date(datePicker.getDate().getTime() - (1 * 24 * 60 * 60 * 1000)); // Subtract 1 day
            leftDate.setText(sdf.format(prevDate));

            rightDate.setText(sdf.format(datePicker.getDate()));

            form.revalidate();

            visitList.clear();
            visitList1.clear();

            leftDefaultListModel.removeAll();
            rightDefaultListModel.removeAll();

            leftDefaultListModel = new DefaultListModel();
            rightDefaultListModel = new DefaultListModel();

            leftList.setModel(leftDefaultListModel);
            rightList.setModel(rightDefaultListModel);

            form.revalidate();

            visitDayData.readSearchingVisitDay(leftDate.getText(), wards.getSelectedItem(), visitList, leftList);

            visitDayData.readSearchingVisitDay(rightDate.getText(), wards.getSelectedItem(), visitList1, rightList);

            if (currentDate.getTime() == new Date().getTime()) {

                nextButton.setEnabled(false);

            }

            if (currentDate.getTime() >= new Date().getTime()) {
                nextButton.setEnabled(false);
            } else {
                nextButton.setEnabled(true);
            }

            Date todayTime = new Date();

            if (sdf.format(currentDate).equals(sdf.format(todayTime))) {
                today.setVisible(true);
            } else {
                today.setVisible(false);
            }

            form.revalidate();

        });

        form.revalidate();
        
        container.add(BorderLayout.CENTER, dateSelectorContainer);

        today = new LabelCreator("Today").getLabel();

        container.add(BorderLayout.EAST, today);

    }

    public void setMidPart() {

        leftDefaultListModel = new DefaultListModel();

        leftList = new List(leftDefaultListModel);

        //leftList.addItem("first item");
        rightDefaultListModel = new DefaultListModel();

        rightList = new List(rightDefaultListModel);

        //rightList.addItem("first item");
        dateShownContainer = new Container(new GridLayout(1, 2));

        leftDate = new LabelCreator("10/5/2024").getLabel();
        rightDate = new LabelCreator("10/6/2024").getLabel();

        Date prevDate = new Date(currentDate.getTime() - (1 * 24 * 60 * 60 * 1000)); // Subtract 1 day
        leftDate.setText(sdf.format(prevDate));

        rightDate.setText(sdf.format(currentDate));

        //dateShownContainer.add(leftDate)
        //      .add(rightDate);
        secondMidLeft.add(leftDate).add(leftList);
        secondMidRight.add(rightDate).add(rightList);

        form.revalidate();

    }

    public void setThirdPart() {

        previousVisitAdd = new Button("Add Visit");
        previousVisitAdd.getAllStyles().setFont(font);

        PreviousVisitAddController addController = new PreviousVisitAddController(previousVisitAdd);

        addController.form = form;
        addController.setWards(wards);
        addController.setSelectedDate(leftDate.getText());
        addController.selectedWard = wards.getSelectedItem();
        addController.left = true;
        addController.setLeftDate(leftDate);
        addController.setRightDate(rightDate);

        addController.prepareButton();

        previousVisitRemove = new Button("Remove Visit");
        previousVisitRemove.getAllStyles().setFont(font);

        previousVisitPrint = new Button("print Visit");
        previousVisitPrint.getAllStyles().setFont(font);

        presentVisitAdd = new Button("Add Visit");
        presentVisitAdd.getAllStyles().setFont(font);

        PreviousVisitAddController addController1 = new PreviousVisitAddController(presentVisitAdd);

        addController1.setWards(wards);
        addController1.form = form;
        addController1.setSelectedDate(rightDate.getText());
        addController1.selectedWard = wards.getSelectedItem();
        addController1.right = true;
        addController1.setLeftDate(leftDate);
        addController1.setRightDate(rightDate);

        addController1.prepareButton();

        presentVisitRemove = new Button("Remove Visit");
        presentVisitRemove.getAllStyles().setFont(font);

        presentVisitRemove.addActionListener(e -> {

            System.out.println("list has " + visitList1.size() + " " + rightList.getSelectedIndex());

            visitDayData.deleteVisitDay(wards.getSelectedItem(), visitList1.get(rightList.getSelectedIndex()).get("_id").toString(), new Callback() {
                @Override
                public void onSucess(Object value) {

                    Dialog.show("Database Info", value.toString(), "OK", "Cancel");

                }

                @Override
                public void onError(Object sender, Throwable err, int errorCode, String errorMessage) {

                    Dialog.show("Database Info", errorCode + " :- " + errorMessage, "OK", "Cancel");

                }

            });

        });

        previousVisitRemove.addActionListener(e -> {

            System.out.println("list has " + visitList.size() + " " + leftList.getSelectedIndex());

            visitDayData.deleteVisitDay(wards.getSelectedItem(), visitList.get(leftList.getSelectedIndex()).get("_id").toString(), new Callback() {
                @Override
                public void onSucess(Object value) {

                    Dialog.show("Database Info", value.toString(), "OK", "Cancel");

                }

                @Override
                public void onError(Object sender, Throwable err, int errorCode, String errorMessage) {

                    Dialog.show("Database Info", errorCode + " :- " + errorMessage, "OK", "Cancel");

                }

            });

        });

        presentVisitPrint = new Button("print Visit");
        presentVisitPrint.getAllStyles().setFont(font);

        thirdPartLeft.add(previousVisitAdd)
                .add(previousVisitRemove)
                .add(previousVisitPrint);

        thirdPartRight.add(presentVisitAdd)
                .add(presentVisitRemove)
                .add(presentVisitPrint);

    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    private void updateDateLabels() {

        Date prevDate = new Date(currentDate.getTime() - (1 * 24 * 60 * 60 * 1000)); // Subtract 1 day
        leftDate.setText(sdf.format(prevDate));

        rightDate.setText(sdf.format(currentDate));

        form.revalidate();

        visitList.clear();
        visitList1.clear();

        leftDefaultListModel.removeAll();
        rightDefaultListModel.removeAll();

        leftDefaultListModel = new DefaultListModel();
        rightDefaultListModel = new DefaultListModel();

        leftList.setModel(leftDefaultListModel);
        rightList.setModel(rightDefaultListModel);

        form.revalidate();

        visitDayData.readSearchingVisitDay(leftDate.getText(), wards.getSelectedItem(), visitList, leftList);

        visitDayData.readSearchingVisitDay(rightDate.getText(), wards.getSelectedItem(), visitList1, rightList);

        form.revalidate();

        Date todayDate = new Date();

        if (currentDate.getTime() == todayDate.getTime()) {

            nextButton.setEnabled(false);

            return;

        }

        if (currentDate.getTime() >= todayDate.getTime()) {
            nextButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);
        }

        Date todayTime = new Date();

        if (sdf.format(currentDate).equals(sdf.format(todayTime))) {
            today.setVisible(true);
        } else {
            today.setVisible(false);
        }

        form.revalidate();

    }

    private void moveDate(int days) {
        currentDate = new Date(currentDate.getTime() + (days * 24 * 60 * 60 * 1000)); // Add or subtract days

        Date todayDate = new Date();

        if (currentDate.getTime() >= todayDate.getTime()) {
            nextButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);

            updateDateLabels();
        }

    }
}
